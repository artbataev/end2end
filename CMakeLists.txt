cmake_minimum_required(VERSION 3.8)

if ($ENV{TRAVIS_BUILD_NUMBER})
    set(PROJECT_VERSION 0.0.$ENV{TRAVIS_BUILD_NUMBER})
else ()
    set(PROJECT_VERSION 0.0.1)
endif ()

project(pytorch_end2end VERSION ${PROJECT_VERSION} LANGUAGES CXX)

find_package(Torch REQUIRED)
add_subdirectory(third_party/pybind11)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

find_package(Threads)

# kenlm
add_subdirectory(third_party/kenlm)
include_directories(third_party/kenlm)

# inner libraries
add_library(threadpool
        pytorch_end2end/src/threadpool.cpp
        pytorch_end2end/src/threadpool.h)
target_link_libraries(threadpool
        ${CMAKE_THREAD_LIBS_INIT})

add_library(inner_math_utils
        pytorch_end2end/src/math_utils.cpp
        pytorch_end2end/src/math_utils.h)
target_link_libraries(inner_math_utils
        PRIVATE pybind11::module
        PRIVATE ${TORCH_LIBRARIES})


# CTC loss
add_library(cpp_ctc_loss MODULE
        pytorch_end2end/src/ctc_loss.cpp
        pytorch_end2end/src/ctc_loss.h)

target_link_libraries(cpp_ctc_loss
        PRIVATE threadpool
        PRIVATE inner_math_utils
        PRIVATE pybind11::module
        PRIVATE ${TORCH_LIBRARIES}
        )

set_target_properties(cpp_ctc_loss PROPERTIES
        CXX_STANDARD 11
        CXX_STANDARD_REQUIRED YES
        PREFIX "${PYTHON_MODULE_PREFIX}"
        SUFFIX "${PYTHON_MODULE_EXTENSION}")


# Decoder
add_library(cpp_ctc_decoder MODULE
        pytorch_end2end/src/ctc_decoder.cpp
        pytorch_end2end/src/ctc_decoder.h)

target_link_libraries(cpp_ctc_decoder
        PRIVATE threadpool
        PRIVATE inner_math_utils
        PRIVATE pybind11::module
        PRIVATE ${TORCH_LIBRARIES}
        PRIVATE kenlm
        )

set_target_properties(cpp_ctc_decoder PROPERTIES
        CXX_STANDARD 11
        CXX_STANDARD_REQUIRED YES
        PREFIX "${PYTHON_MODULE_PREFIX}"
        SUFFIX "${PYTHON_MODULE_EXTENSION}")
